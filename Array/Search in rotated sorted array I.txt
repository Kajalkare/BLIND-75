Search in rotated sorted array

Approach 1 - Brute force
- Linear search
T.C = O(n)	S.C = O(1)

int search(vector<int>& nums, int target) {
	int n = nums.size();
	for(int i=0; i<n; i++)
	{
		if(nums[i] == target)
		{
			return i;
		}
	}
	return -1;
}

Approach 2 - Binary Search (find min ele's index)
T.C = O(3*logn)		S.C = O(1)

int findMin(vector<int>& nums) {
	int n = nums.size();
	int ans = INT_MAX;  int id = -1;
	int l = 0;  int r = nums.size()-1;

	while(l <= r)
	{
		int mid = (l+r)/2;
		if(nums[l] <= nums[mid])
		{
			if(nums[l] <= ans)
			{
				ans = nums[l];
				id = l;
			}
			l = mid+1;
		}
		else if(nums[mid] <= nums[r]){
			if(nums[mid] <= ans)
			{
				ans = nums[mid];
				id = mid;
			}
			r = mid-1;
		}
	}
	return id;
}

int binarySearch(vector<int>& nums, int l, int r, int target)
{
	while(l <= r)
	{
		int mid = (l+r)/2;
		if(nums[mid] == target)
		{
			return mid;
		}
		else if(nums[mid] < target)
		{
			l = mid+1;
		}
		else{
			r = mid-1;
		}
	}
	return -1;
}

int search(vector<int>& nums, int target) {
	int n = nums.size();
	
	int id = findMin(nums);
	cout<<id<<endl;
	int value1 = binarySearch(nums, 0, id-1, target);
	int value2 = binarySearch(nums, id, n-1, target);

	if(value1 != -1)
	{
		return value1;
	}
	return value2;
}

Approach 3 - Binary Search (Optimized)
T.C = O(logn)		S.C = O(1)

int search(vector<int>& nums, int target) {
	int n = nums.size();
   
	int l = 0;  int r = nums.size()-1;

	while(l <= r)
	{
		int mid = (l+r)/2;
		if(nums[mid] == target)
		{
			return mid;
		}
		else if(nums[l] <= nums[mid])
		{
			if(nums[l] <= target && target <= nums[mid])
			{
				r = mid-1;
			}
			else{
				l = mid+1;
			}
		}
		else if(nums[mid] <= nums[r]){
			if(nums[mid] <= target && target <= nums[r])
			{
				l = mid+1;
			}
			else{
				r = mid-1;
			}
		}
	}
	return -1;
}