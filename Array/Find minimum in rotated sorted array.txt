Find minimum in rotated sorted array

Approach 1 - Brute force
Linear search
T.C = O(n)	S.C = O(1)

int findMin(vector<int>& nums) {
	int n = nums.size();
	int ans = INT_MAX;  
	for(int i=0; i<n; i++)
	{
		if(nums[i] < ans)
		{
			ans = nums[i];  
		}
	}
	return ans;
}

Approach 2 - Sort the array and return first element
T.C = O(nlogn)		S.C = O(1)

int findMin(vector<int>& nums) {
	int n = nums.size();
	sort(nums.begin(), nums.end());

	return nums[0];
}

Approach 3 - Binary search
T.C = O(logn)		S.C = O(1)

int findMin(vector<int>& nums) {
	int n = nums.size();
	int ans = INT_MAX;
	int l = 0;  int r = nums.size()-1;

	while(l <= r)
	{
		int mid = (l+r)/2;
		if(nums[l] <= nums[mid])
		{
			ans = min(ans, nums[l]);
			l = mid+1;
		}
		else{
			ans = min(ans, nums[mid]);
			r = mid-1;
		}
	}
	return ans;
}