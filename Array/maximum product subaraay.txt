Maximum product subarray

Approach 1 - Brute force
using 2 loops
T.C = O(n*n)		S.C = O(1)

int maxProduct(vector<int>& nums) {
	int n = nums.size();    int ans = INT_MIN;
	for(int i=0; i<n; i++)
	{
		int prod = 1;
		for(int j = i; j<n; j++)
		{
			prod = prod*nums[j];
			ans = max(ans, prod);
		}
	}
	return ans;
}

Approach 2 - using prefix and suffix

T.C = O(2n)		S.C = O(1)

int maxProduct(vector<int>& nums) {
	int n = nums.size();
	int pre = 1;    int ans = INT_MIN;
	for(int i=0; i<nums.size(); i++)
	{
		if(pre == 0)
		{
			pre = 1;
		}
		pre = pre*nums[i];
		ans = max(ans, pre);
	}
	int suf = 1;
	for(int i=n-1; i>=0; i--)
	{
		if(suf == 0)
		{
			suf = 1;
		}
		suf = suf*nums[i];
		ans = max(ans, suf);
	}
	return ans;
}

Approach 3 - using 2 loops and prefix suffix
T.C = O(n)		S.C = O(1)

int maxProduct(vector<int>& nums) {
	int n = nums.size();
	int pre = 1;    int suf = 1;   int ans = INT_MIN;
	for(int i=0; i<nums.size(); i++)
	{
		if(pre == 0)
		{
			pre = 1;
		}
		if(suf == 0)
		{
			suf = 1;
		}
		pre = pre*nums[i];  
		suf = suf*nums[n-i-1];
		ans = max(ans, max(pre, suf));
	}
	return ans;
}
