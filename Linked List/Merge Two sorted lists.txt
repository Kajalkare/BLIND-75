Merge two sorted lists

Approach 1 - Brute force
initialize a new linked list 
T.C = O(n)		S.C = O(n)

ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {  
	ListNode* dummyNode = new ListNode(0);
	ListNode* res = dummyNode;

	while(list1 && list2)
	{
		if(list1->val <= list2->val)
		{
			ListNode* newNode = new ListNode(list1->val);
			res->next = newNode;
			res = res->next;
			list1 = list1->next;
		}
		else{
			ListNode* newNode = new ListNode(list2->val);
			res->next = newNode;
			res = res->next;
			list2 = list2->next;
		}
	}
	while(list1)
	{
		ListNode* newNode = new ListNode(list1->val);
		res->next = newNode;
		res = res->next;
		list1 = list1->next;
	}
	while(list2)
	{
		ListNode* newNode = new ListNode(list2->val);
		res->next = newNode;
		res = res->next;
		list2 = list2->next;
	}
	return dummyNode->next;
}

---------------------------------------------------------------------------------------

Approach 2 - use dummy pointer and arrange the list pointer
T.C = O(n)	S.C = O(1)

ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {  
	ListNode* dummyNode = new ListNode(0);
	ListNode* res = dummyNode;

	while(list1 && list2)
	{
		if(list1->val <= list2->val)
		{
			res->next = list1;
			res = res->next;
			list1 = list1->next;
		}
		else{
			res->next = list2;
			res = res->next;
			list2 = list2->next;
		}
	}
	while(list1)
	{
		res->next = list1;
		res = res->next;
		list1 = list1->next;
	}
	while(list2)
	{
		res->next = list2;
		res = res->next;
		list2 = list2->next;
	}
	return dummyNode->next;
}