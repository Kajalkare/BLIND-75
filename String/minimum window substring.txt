minimum window substring

Approach 1 - Brute force
-using two loops

string minWindow(string s, string t) {
	int n = s.length();
	if(t.length() > s.length())
	{
		return "";
	}
	
	unordered_map<char, int>mp2;
	for(int i=0; i<t.length(); i++)
	{
		mp2[t[i]]++;
	}
	int ans = INT_MAX;  int start = -1;     int end = -1;
	for(int i=0; i<n; i++)
	{
		unordered_map<char, int>mp = mp2;
		int count = mp.size();
		for(int j=i; j<n; j++)
		{
			if(mp.find(s[j]) != mp.end())
			{
				mp[s[j]]--;
				if(mp[s[j]] == 0)
				{
					count--;
				}
				if(count == 0)
				{
					if(j-i+1 < ans)
					{
						ans = j-i+1;
						start = i;  end = j;
					}
					break;
				}
			}
		}
	}
	if(ans == INT_MAX)
	{
		return "";
	}
	string res = "";
	for(int z=start; z<= end; z++)
	{
		res += s[z];
	}
	return res;
}

-------------------------------------------------------------------------------------------------------

Approach 2 - Sliding window algorithm
T.C = O(n)		S.C = O(n)

string minWindow(string s, string t) {
	int n = s.length();
	if(t.length() > s.length())
	{
		return "";
	}
	unordered_map<char, int>mp;
	int ans = INT_MAX;  int start = -1;     int end = -1;
	for(int i=0; i<t.length(); i++)
	{
		mp[t[i]]++;
	}
	int count = mp.size();

	int i = 0;  int j = 0;
	while(j < s.length())
	{
		if(mp.find(s[j]) != mp.end())
		{
			mp[s[j]]--;
			if(mp[s[j]] == 0)
			{
				count--;
			}
		}

		while(count == 0)
		{
			if(j-i+1 < ans)
			{
				ans = j-i+1;
				start = i;  end = j;
			}
			if(mp.find(s[i]) != mp.end())
			{
				mp[s[i]]++;
				if(mp[s[i]] == 1)
				{
					count++;
				}
			}
			i++;
		}
		j++;
	}
	if(ans == INT_MAX)
	{
		return "";
	}
	string res = "";
	for(int z=start; z<=end; z++)
	{
		res += s[z];
	}
	return res;
}