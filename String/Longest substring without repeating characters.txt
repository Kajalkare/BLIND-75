Longest substring without repeating characters

Approach 1 - Brute Force
Using 2 loops - generate all subarray 
T.C = O(n^2) 	S.C = O(n)

int lengthOfLongestSubstring(string s) {
	int n = s.length();     int ans = 0;
	for(int i=0; i<n; i++)
	{
		unordered_map<char, int>mp;
		for(int j=i; j<n; j++)
		{
			mp[s[j]]++;
			if(mp.size() == j-i+1)
			{
				ans = max(ans, j-i+1);
			}
			else{
				break;
			}
		}
	}
	return ans;
}

--------------------------------------------------------------------------------

Approach 2 - Sliding window
T.C = O(n)	S.C = O(n)

int lengthOfLongestSubstring(string s) {
	int n = s.length();     int ans = 0;
	int i = 0;  int j = 0;
	unordered_map<char, int>mp;
	while(j < n)
	{
		mp[s[j]]++;
		while(j-i+1 > mp.size())
		{
			mp[s[i]]--;
			if(mp[s[i]] == 0)
			{
				mp.erase(s[i]);
			}
			i++;
		}
		ans = max(ans, j-i+1);
		j++;
	}
	return ans;
}